#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile
#
name: "Auto compile with openwrt sdk"
permissions:
  contents: write
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
env:
  TZ: Asia/Shanghai
  passwall2: ${{ github.repository }}
  packages: Jackie264/openwrt-passwall-packages
  SDK_VER: "24.10"
  LUCI_VER: "24.10"
  SDK_URL: "https://downloads.openwrt.org/releases/24.10.4/targets/x86/64/openwrt-sdk-24.10.4-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
  GH_TOKEN_ORG: ${{ github.token }}

jobs:
  job_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      passwall2_version: ${{ steps.check_version.outputs.latest_version }}
      has_update: ${{ steps.check_version.outputs.has_update }}
      prerelease: ${{ steps.check_version.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Check version
        id: check_version
        env:
          url_tags: https://api.github.com/repos/${{ env.passwall2 }}/tags
        run: |
          cd luci-app-passwall2
          latest_version=$(awk -F ':=' '/PKG_VERSION|PKG_RELEASE/ {print $2}' Makefile | sed ':a;N;s/\$(PKG_VERSION)-//;s/\n$//;s/\n/-/;ba')
          has_update=$([ -z "$(wget -qO- -t1 -T2 ${{env.url_tags}} | grep \"${latest_version}\")" ] && echo true || echo false)
          prerelease=$([ "${{ github.ref_name }}" == "main" ] && echo false || echo true)
          echo "latest_version=${latest_version}" >> $GITHUB_OUTPUT
          echo "has_update=${has_update}" >> $GITHUB_OUTPUT
          echo "prerelease=${prerelease}" >> $GITHUB_OUTPUT
          echo "latest_version: ${latest_version}"
          echo "has_update: ${has_update}"
          echo "prerelease: ${prerelease}"

      - name: Prepare release
        if: steps.check_version.outputs.has_update == 'true'
        run: |
          echo "## :mega:Update content" >> release.txt
          echo "![](https://img.shields.io/github/downloads/${{ env.passwall2 }}/${{steps.check_version.outputs.latest_version}}/total?style=flat-square)" >> release.txt
          echo "### Passwall2 Info" >> release.txt
          echo "**:minidisc: Passwall2 Version: ${{steps.check_version.outputs.latest_version}}**" >> release.txt
          touch release.txt

      - name: Generate new tag & release
        if: steps.check_version.outputs.has_update == 'true'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.check_version.outputs.latest_version}}
          target_commitish: ${{ github.ref_name }}
          prerelease: ${{steps.check_version.outputs.prerelease}}
          body_path: release.txt


  job_build_passwall2:
    name: Build luci-app-passwall2
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Install packages
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Cache OpenWrt dl
        uses: actions/cache@v4
        with:
          path: sdk/dl
          key: ${{ runner.os }}-openwrt-dl-${{ env.SDK_VER }}

      - name: Initialization environment
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          wget ${{ env.SDK_URL }}
          file_name=$(echo ${{ env.SDK_URL }} | awk -F/ '{print $NF}')
          mkdir -p sdk
          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf $file_name -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi
          cd sdk

          cat > feeds.conf.default << EOF
          src-git passwall2 https://github.com/${{ env.passwall2 }}.git;${{ github.ref_name }}
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ env.SDK_VER }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ env.SDK_VER }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ env.LUCI_VER }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ env.SDK_VER }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ env.SDK_VER }}
          EOF
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          #--------------------------------------begin_patches------------------------------------------
          echo "Start applying the patch"

          rm -rf temp_resp
          git clone -b master --single-branch https://github.com/openwrt/packages.git temp_resp
          cd temp_resp
          git checkout 2b99cd7d7637da0f152da378994f699aaf0dd44d
          cd ..
          echo "update golang version"
          rm -rf feeds/packages/lang/golang
          cp -r temp_resp/lang/golang feeds/packages/lang
          echo "update rust version"
          rm -rf feeds/packages/lang/rust
          cp -r temp_resp/lang/rust feeds/packages/lang
          rm -rf temp_resp

          echo "Patch application completed"
          #--------------------------------------end_patches--------------------------------------------

      - name: Compile passwall2
        id: compile
        run: |
          cd sdk
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall2=m" >> .config
          make defconfig
          echo "make package/luci-app-passwall2/{clean,compile} -j$(nproc)"
          make package/luci-app-passwall2/{clean,compile} -j$(nproc) V=s
          mv bin/packages/x86_64/passwall2/ ../
          make clean
          rm .config .config.old
          rm -rf feeds/passwall2 feeds/passwall2.*
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload passwall2 ipks to release
        uses: softprops/action-gh-release@v2
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.passwall2_version}}
          files: ${{ env.FIRMWARE }}/passwall2/*.ipk

      - name: Checkout custom-packages repo
        uses: actions/checkout@v5
        with:
          repository: OneNAS-space/custom-packages
          token: ${{ secrets.CUSTOM_PACKAGES_TOKEN }}
          path: custom-packages

      - name: Update luci artifacts
        run: |
          mkdir -p custom-packages/luci
          
          find ./passwall2 -type f -name "luci-app*.ipk" | while read -r f; do
            base=$(basename "$f")
            pkgname=$(echo "$base" | sed -E 's/^([a-zA-Z0-9\-_]+)_.*$/\1/')
            echo "Cleaning old versions of $pkgname"
            rm -f custom-packages/luci/${pkgname}_*.ipk
            cp "$f" custom-packages/luci/
          done
          ls -la custom-packages/luci/
          echo "PKG_NAME=${{ github.event.repository.name }}" >> "$GITHUB_ENV"
          cd custom-packages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add luci/
          git commit -m "Update to - v${{ needs.job_check.outputs.passwall2_version }}" || echo "No changes"
          git push
